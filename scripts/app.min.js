(() => {
  // scripts/utils.js
  function createElement(elName, content, attrs = {}) {
    const el = document.createElement(elName);
    for (const key in attrs) {
      el.setAttribute(key, attrs[key]);
    }
    if (typeof content === "string") {
      el.innerHTML = content;
    }
    if (content instanceof HTMLElement) {
      el.appendChild(content);
    }
    return el;
  }
  function $(selector) {
    var selectorType = "querySelectorAll";
    if (selector.indexOf("#") === 0) {
      selectorType = "querySelector";
    }
    if (selector.indexOf(".") === 0) {
      selectorType = "querySelectorAll";
      const items = document[selectorType](selector);
      if (items.length === 1) {
        selectorType = "querySelector";
      }
    }
    return document[selectorType](selector);
  }
  function debounce(func, wait = 300) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }
  function saveOnKeyup(e) {
    const cardId = e.target.id;
    window.cardsStore.update(
      (item) => item["id"] === parseInt(cardId),
      (item) => ({ ...item, content: e.detail.text })
    );
  }
  function deleteCard(e) {
    const cardId = e.target.id;
    window.cardsStore.remove((item) => item["id"] === parseInt(cardId));
  }
  function addDragStartAndEndEvents(card) {
    card.addEventListener("dragstart", () => {
      card.setAttribute("is-dragging", true);
    });
    card.addEventListener("dragend", () => {
      card.setAttribute("is-dragging", false);
    });
  }
  function getCurrentDateFormatted() {
    const now = /* @__PURE__ */ new Date();
    const day = String(now.getDate()).padStart(2, "0");
    const month = String(now.getMonth() + 1).padStart(2, "0");
    const year = now.getFullYear();
    return `${day}-${month}-${year}`;
  }
  var STATUS_TYPES = {
    TODO: "todo",
    IN_PROGRESS: "inprogress",
    DONE: "done"
  };

  // scripts/local-storage.js
  function createLocalStore(key) {
    const get = () => {
      const data = localStorage.getItem(key);
      return data ? JSON.parse(data) : [];
    };
    const save = (data) => localStorage.setItem(key, JSON.stringify(data));
    return {
      add(item) {
        const items = get();
        items.push(item);
        save(items);
      },
      remove(predicate) {
        const items = get().filter((item) => !predicate(item));
        save(items);
      },
      update(predicate, updater) {
        const items = get().map((item) => predicate(item) ? updater(item) : item);
        save(items);
      },
      getAll() {
        return get();
      }
    };
  }

  // scripts/stores.js
  var cardsStore = createLocalStore("cards");
  window.cardsStore = cardsStore;

  // scripts/drag.js
  function initDrag() {
    const draggables = $("kb-card");
    if (draggables.length) {
      draggables.forEach((card) => {
        addDragStartAndEndEvents(card);
      });
    }
  }
  var dropzones = $(".column");
  dropzones.forEach((zone) => {
    zone.addEventListener("dragover", (e) => {
      e.preventDefault();
      const cardBeneath = getCardBeneath(zone, e.clientY);
      const currentCard = document.querySelector("[is-dragging]");
      if (!cardBeneath) {
        zone.appendChild(currentCard);
      } else {
        zone.insertBefore(currentCard, cardBeneath);
      }
    });
    zone.addEventListener("dragend", (e) => {
      e.preventDefault();
      const currentCard = document.querySelector("[is-dragging]");
      let cardData = {
        content: currentCard.content,
        draggable: true,
        ["status"]: currentCard.status,
        ["id"]: currentCard.id,
        created: currentCard.created,
        started: currentCard.started,
        done: currentCard.done
      };
      cardData = { ...cardData, ["status"]: zone.dataset.status };
      let started = {};
      if (zone.dataset.status === STATUS_TYPES.IN_PROGRESS) {
        started = { ["started"]: getCurrentDateFormatted() };
      }
      let done = {};
      if (zone.dataset.status === STATUS_TYPES.DONE) {
        done = { ["done"]: getCurrentDateFormatted() };
      }
      window.cardsStore.update(
        (item) => item["id"] === parseInt(currentCard.id),
        (item) => ({ ...item, ...started, ...done, ["status"]: zone.dataset.status })
      );
      currentCard.setAttribute("status", zone.dataset.status);
      if (zone.dataset.status === STATUS_TYPES.IN_PROGRESS) {
        console.log("%chey", "background-color: #121212; color: limegreen; padding: .5rem", started.started);
        currentCard.setAttribute("started", started.started);
      }
      if (zone.dataset.status === STATUS_TYPES.DONE) {
        console.log("%cdone", "background-color: #121212; color: limegreen; padding: .5rem", done.done);
        currentCard.setAttribute("done", done.done);
      }
    });
  });
  function getCardBeneath(zone, mouseY) {
    const cards = zone.querySelectorAll("kb-card:not(is-dragging)");
    let closestCard = null;
    let closestOffset = Number.NEGATIVE_INFINITY;
    cards.forEach((card) => {
      const { top } = card.getBoundingClientRect();
      const offset = mouseY - top;
      if (offset < 0 && offset > closestOffset) {
        closestOffset = offset;
        closestCard = card;
      }
    });
    return closestCard;
  }

  // scripts/add.js
  var addbtn = $(".add-card-btn");
  var todoColumn = $(".todo");
  addbtn.addEventListener("click", () => {
    const newCardData = {
      content: "No mames.",
      draggable: true,
      status: STATUS_TYPES.TODO,
      id: Date.now(),
      created: getCurrentDateFormatted(),
      started: null,
      done: null
    };
    const newCard = createElement("kb-card", newCardData.content, newCardData);
    const firstCard = todoColumn.querySelector(".card");
    if (firstCard) {
      todoColumn.insertBefore(newCard, firstCard);
    } else {
      todoColumn.appendChild(newCard);
    }
    newCard.focus();
    newCard.addEventListener("text-changed", debounce(saveOnKeyup));
    newCard.addEventListener("card-deleted", deleteCard);
    window.cardsStore.add(newCardData);
    addDragStartAndEndEvents(newCard);
  });

  // components/kb-card.js
  var template = document.querySelector("template");
  var KbCard = class extends HTMLElement {
    static get observedAttributes() {
      return ["status", "id", "content", "is-dragging", "created", "started", "done"];
    }
    constructor() {
      super();
      const shadowRoot = this.attachShadow({ mode: "closed" });
      shadowRoot.appendChild(template.content.cloneNode(true));
      this.editableDiv = shadowRoot.querySelector("div");
      this.editableDiv.innerHTML = this.getAttribute("content");
      this.editableDiv.addEventListener("input", this.handleInput.bind(this));
      this.deleteBtn = shadowRoot.querySelector(".btn-delete");
      this.deleteBtn.addEventListener("click", this.handleDelete.bind(this));
      this.footer = shadowRoot.querySelector("footer");
    }
    setDateAttributes(name, value) {
      console.log("%cvalue", "background-color: #121212; color: limegreen; padding: .5rem", value);
      const pEl = document.createElement("p");
      const timeEl = document.createElement("time");
      if (name === "created") {
        pEl.textContent = `Created: `;
        timeEl.setAttribute("datetime", this.created);
        timeEl.textContent = this.created;
      }
      if (name === "started") {
        pEl.textContent = `Started: `;
        if (this.started) {
          timeEl.setAttribute("datetime", this.started);
          timeEl.textContent = this.started;
        }
      }
      if (name === "done") {
        pEl.textContent = `done: `;
        if (this.done) {
          timeEl.setAttribute("datetime", this.done);
          timeEl.textContent = this.done;
        }
      }
      pEl.appendChild(timeEl);
      this.footer.appendChild(pEl);
    }
    handleInput(event) {
      const text = event.target.innerHTML;
      const inputEvent = new CustomEvent("text-changed", {
        detail: { text },
        bubbles: true,
        // Allow the event to bubble up the DOM
        composed: true
        // Important for Shadow DOM! Allows event to cross boundary
      });
      this.dispatchEvent(inputEvent);
      this.content = text;
    }
    handleDelete(e) {
      this.remove();
      const deleteEvent = new CustomEvent("card-deleted", {
        bubbles: true,
        // Allow the event to bubble up the DOM
        composed: true
        // Important for Shadow DOM! Allows event to cross boundary
      });
      this.dispatchEvent(deleteEvent);
    }
    connectedCallback() {
      this.draggable = "true";
      this["is-dragging"] = false;
      if (!this.status) {
        this.status = "todo";
      }
      this.content = this.getAttribute("content");
      this.created = this.getAttribute("created");
      this.started = this.getAttribute("started");
      this.done = this.getAttribute("done");
      this.editableDiv.focus();
    }
    attributeChangedCallback(name, oldVal, newVal) {
      if (oldVal !== newVal) {
        this[name] = newVal;
        if (name === "created" || name === "started" || name === "done") {
          if (!newVal || newVal === "null") return;
          this.setDateAttributes(name, newVal);
        }
      }
    }
  };
  var cardStyles = null;
  fetch("./components/kb-card.css").then((res) => res.text()).then((css) => {
    cardStyles = document.createElement("style");
    cardStyles.innerHTML = css;
    template.content.insertBefore(cardStyles, template.content.firstChild);
    customElements.define("kb-card", KbCard);
  });

  // scripts/app.js
  document.addEventListener("DOMContentLoaded", () => {
    const cardsData = window.cardsStore.getAll() ?? [];
    const todoColumn2 = $(".todo");
    const inprogressColumn = $(".inprogress");
    const doneColumn = $(".done");
    if (!cardsData || cardsData.length === 0) {
      return;
    }
    cardsData.forEach((card) => {
      const cardEl = createElement("kb-card", "", {
        draggable: true,
        status: card["status"],
        id: card["id"],
        content: card.content,
        created: getCurrentDateFormatted(),
        started: card.started,
        done: card.done
      });
      if (card["status"] === STATUS_TYPES.TODO) {
        todoColumn2.appendChild(cardEl);
      } else if (card["status"] === STATUS_TYPES.IN_PROGRESS) {
        inprogressColumn.appendChild(cardEl);
      } else if (card["status"] === STATUS_TYPES.DONE) {
        doneColumn.appendChild(cardEl);
      }
      cardEl.addEventListener("text-changed", saveOnKeyup);
      cardEl.addEventListener("card-deleted", deleteCard);
      addDragStartAndEndEvents(cardEl);
    });
    initDrag();
  });
  if ("serviceWorker" in navigator) {
    navigator.serviceWorker.register("./service-worker.js").then(() => console.log("Service Worker registered")).catch((error) => console.log("Service Worker registration failed:", error));
  }
})();
